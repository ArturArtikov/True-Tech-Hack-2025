import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import csv
import os
import re
import json
from datetime import datetime, timezone

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ True Tabs –∏ Telegram Bot ===========
API_TOKEN         = '7157619299:AAGzXLUWQaNleeHiULr4s-zhqtFtzQ0aONE'
TRUE_TABS_WEBHOOK = 'https://true.tabs.sale/fusion/v1/datasheets/dst4tjJSjQ4lVVfKtz/records'
TRUE_TABS_GET     = TRUE_TABS_WEBHOOK
HEADERS           = {'Authorization': 'Bearer uskuKABYCLzpEBhKQrRCI4O'}

bot = telebot.TeleBot(API_TOKEN)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã: —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
user_data    = {}  # {uid: {step:int, data:dict, editing_field:Optional[str]}}
edit_context = {}  # {uid: {record_id:str, field:Optional[str]}}

# –ü–æ—Ä—è–¥–æ–∫ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª–µ–π
fields_sequence = [
    "–§–∞–º–∏–ª–∏—è","–ò–º—è","–û—Ç—á–µ—Å—Ç–≤–æ","–ü–æ–ª","–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞","–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞","–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞",
    "–ù–æ–º–µ—Ä –°–ù–ò–õ–°","–ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞","–ö–æ–º–ø–∞–Ω–∏—è",
    "–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è","–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞"
]
prompts = {
    "–§–∞–º–∏–ª–∏—è":           "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
    "–ò–º—è":               "–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
    "–û—Ç—á–µ—Å—Ç–≤–æ":          "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
    "–ü–æ–ª":               "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª (–ú –∏–ª–∏ –ñ):",
    "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è":     "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):",
    "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (10‚Äì15 —Ü–∏—Ñ—Ä):",
    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞": "–í–≤–µ–¥–∏—Ç–µ e‚Äëmail:",
    "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞":    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç (10 —Ü–∏—Ñ—Ä):",
    "–ù–æ–º–µ—Ä –°–ù–ò–õ–°":       "–í–≤–µ–¥–∏—Ç–µ –°–ù–ò–õ–° (11 —Ü–∏—Ñ—Ä):",
    "–ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞":    "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
    "–ö–æ–º–ø–∞–Ω–∏—è":          "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:",
    "–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è":    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
    "–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞":     "–û–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ:"
}

# ========== –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===========
def clean_snils(v):
    return re.sub(r'\D','', v)
def validate_snils(v):
    return bool(re.fullmatch(r'(?!0{11})\d{11}', clean_snils(v)))
def clean_phone(v):
    return re.sub(r'[^\d]','', v)
def validate_phone(v):
    return bool(re.fullmatch(r'\d{10,15}', clean_phone(v)))

def validate(field, val):
    if field in ("–§–∞–º–∏–ª–∏—è","–ò–º—è","–û—Ç—á–µ—Å—Ç–≤–æ"):
        return bool(re.fullmatch(r"[–ê-–Ø–Å][–∞-—è—ë]+", val))
    if field == "–ü–æ–ª":
        return val in ("–ú","–ñ")
    if field == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è":
        try:
            datetime.strptime(val, "%Y-%m-%d")
            return True
        except:
            return False
    if field == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        return validate_phone(val)
    if field == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞":
        return bool(re.fullmatch(r".+@.+\..+", val))
    if field == "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞":
        return bool(re.fullmatch(r"\d{10}", val))
    if field == "–ù–æ–º–µ—Ä –°–ù–ò–õ–°":
        return validate_snils(val)
    if field == "–ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞":
        return val.isdigit()
    return bool(val.strip())

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===========
log_file = "log_full.csv"
if not os.path.exists(log_file):
    with open(log_file, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(["–î–∞—Ç–∞","Telegram ID"] + fields_sequence)

# ========== –ê–Ω–∫–µ—Ç–∞: –∑–∞–ø—É—Å–∫ –∏ —à–∞–≥–∏ ===========
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.chat.id
    user_data[uid] = {"step":0, "data":{}, "editing_field": None}
    ask_field(uid)


def ask_field(uid):
    step = user_data[uid]["step"]
    field = fields_sequence[step]
    if field == "–ü–æ–ª":
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("–ú", callback_data="–ü–æ–ª|–ú"),
            InlineKeyboardButton("–ñ", callback_data="–ü–æ–ª|–ñ")
        )
        bot.send_message(uid, prompts[field], reply_markup=kb)
    else:
        bot.send_message(uid, prompts[field])

# ========== –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π ===========
@bot.callback_query_handler(func=lambda c: c.data.startswith("EDITREC"))
def handle_editrec(c):
    bot.answer_callback_query(c.id)
    uid = c.message.chat.id
    rec_id = c.data.split("|",1)[1]
    edit_context[uid] = {"record_id": rec_id, "field": None}
    kb = InlineKeyboardMarkup(row_width=1)
    for fld in fields_sequence:
        kb.add(InlineKeyboardButton(fld, callback_data=f"EDITFIELDREC|{fld}"))
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("EDITFIELDREC"))
def handle_editfieldrec(c):
    bot.answer_callback_query(c.id)
    uid = c.message.chat.id
    fld = c.data.split("|",1)[1]
    edit_context[uid]["field"] = fld
    bot.send_message(uid, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{fld}¬ª:")

@bot.message_handler(func=lambda m: m.chat.id in edit_context and edit_context[m.chat.id]["field"] is not None)
def handle_text_editrec(m):
    uid = m.chat.id
    ctx = edit_context.pop(uid)
    rec_id = ctx["record_id"]
    field  = ctx["field"]
    new_val = m.text.strip()
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    if not validate(field, new_val):
        return bot.send_message(uid, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è ¬´{field}¬ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    if field == "–ù–æ–º–µ—Ä –°–ù–ò–õ–°":
        new_val = int(clean_snils(new_val))
    elif field in ("–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞","–ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞"):
        new_val = int(new_val)
    elif field == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è":
        dt = datetime.strptime(new_val, "%Y-%m-%d")
        new_val = dt.strftime("%Y-%m-%dT%H:%M:%SZ")
    elif field == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        new_val = clean_phone(new_val)
    # PATCH –∑–∞–ø—Ä–æ—Å
    payload = {"records":[{"recordId": rec_id, "fields": {field: new_val}}]}
    try:
        res = requests.patch(TRUE_TABS_WEBHOOK, json=payload, headers=HEADERS).json()
        if res.get("success"):
            bot.send_message(uid, f"‚úÖ –ü–æ–ª–µ ¬´{field}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            bot.send_message(uid, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {res.get('message')}")
    except Exception as e:
        bot.send_message(uid, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

# ========== –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä inline –¥–ª—è –∞–Ω–∫–µ—Ç—ã ===========
@bot.callback_query_handler(func=lambda call: True)
def on_inline(call):
    uid = call.message.chat.id
    bot.answer_callback_query(call.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç—ã, –Ω–µ search-edit
    if uid not in user_data:
        bot.send_message(uid, "‚ùó –°–Ω–∞—á–∞–ª–∞ /start")
        return
    action, *rest = call.data.split("|",1)
    if action == "–ü–æ–ª":
        user_data[uid]["data"]["–ü–æ–ª"] = rest[0]
        user_data[uid]["step"] += 1
        ask_field(uid)
        return
    if action == "CONFIRM":
        send_to_truetabs(uid)
        return
    if action == "EDIT":
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
        kb = InlineKeyboardMarkup(row_width=1)
        for fld in fields_sequence:
            kb.add(InlineKeyboardButton(fld, callback_data=f"EDITFIELD|{fld}"))
        bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
        return
    if action == "EDITFIELD":
        fld = rest[0]
        user_data[uid]["editing_field"] = fld
        bot.send_message(uid, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{fld}¬ª:")
        return

# ========== –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–Ω–∫–µ—Ç—ã ===========
@bot.message_handler(func=lambda m: m.chat.id in user_data)
def on_text(m):
    uid = m.chat.id
    state = user_data[uid]
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ –∞–Ω–∫–µ—Ç—ã
    if state.get("editing_field"):
        fld = state.pop("editing_field")
        val = m.text.strip()
        if not validate(fld, val):
            bot.send_message(uid, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è ¬´{fld}¬ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ.")
            return
        if fld == "–ù–æ–º–µ—Ä –°–ù–ò–õ–°":    val = clean_snils(val)
        if fld == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": val = clean_phone(val)
        state["data"][fld] = val
        show_summary(uid)
        return
    # –æ–±—ã—á–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –ø–æ —à–∞–≥–∞–º
    step = state["step"]
    fld  = fields_sequence[step]
    val  = m.text.strip()
    if not validate(fld, val):
        bot.send_message(uid, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è ¬´{fld}¬ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ.")
        ask_field(uid)
        return
    if fld == "–ù–æ–º–µ—Ä –°–ù–ò–õ–°":    val = clean_snils(val)
    if fld == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": val = clean_phone(val)
    state["data"][fld] = val
    if step+1 < len(fields_sequence):
        state["step"] += 1
        ask_field(uid)
    else:
        show_summary(uid)

# ========== –ü–æ–∫–∞–∑ summary –∞–Ω–∫–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ===========
def show_summary(uid):
    d = user_data[uid]["data"]
    txt = "üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n" + "\n".join(f"‚Ä¢ {k}: {d.get(k,'')}" for k in fields_sequence)
    kb  = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="CONFIRM"),
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="EDIT")
    )
    bot.send_message(uid, txt, reply_markup=kb)

# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –≤ True Tabs ===========
def send_to_truetabs(uid):
    d = user_data[uid]["data"].copy()
    # –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–∏–ø—ã
    d["–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"] = int(d["–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"])
    d["–ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞"] = int(d["–ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞"])
    d["–ù–æ–º–µ—Ä –°–ù–ò–õ–°"]    = int(d["–ù–æ–º–µ—Ä –°–ù–ò–õ–°"])
    dt = datetime.strptime(d["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"], "%Y-%m-%d")
    d["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"]   = dt.strftime("%Y-%m-%dT%H:%M:%SZ")
    payload = {"records":[{"fields":d}]}
    res = requests.post(TRUE_TABS_WEBHOOK, json=payload, headers=HEADERS).json()
    if res.get("success"):
        bot.send_message(uid, "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        bot.send_message(uid, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {res.get('message')}")
    # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    with open(log_file, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow([datetime.now(), uid] + [d[f] for f in fields_sequence])
    user_data.pop(uid)

# ========== –ü–æ–∏—Å–∫ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä ===========
@bot.message_handler(commands=['search'])
def cmd_search(m):
    parts = m.text.split(maxsplit=2)
    if len(parts) < 3:
        return bot.send_message(m.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search <–ü–æ–ª–µ> <–ó–Ω–∞—á–µ–Ω–∏–µ>")
    field, value = parts[1], parts[2].strip().lower()
    if field not in fields_sequence:
        return bot.send_message(m.chat.id, "‚ö†Ô∏è –ü–æ–ª–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: " + ", ".join(fields_sequence))
    recs = requests.get(TRUE_TABS_GET, headers=HEADERS).json().get('data',{}).get('records',[])
    matches = [r for r in recs if str(r['fields'].get(field,'')).lower()==value]
    if not matches:
        return bot.send_message(m.chat.id, "‚ÑπÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    for rec in matches[:5]:
        f = rec['fields']
        raw = f.get('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è','')
        if isinstance(raw,str):
            date_disp = raw[:10]
        else:
            ts = int(raw)/1000 if raw>1e10 else int(raw)
            date_disp = datetime.fromtimestamp(ts, tz=timezone.utc).strftime('%Y-%m-%d')
        txt = (
            f"üìã ID: {rec['recordId']}\n"
            f"‚Ä¢ {field}: {f.get(field,'‚Äì')}\n"
            f"‚Ä¢ –¢–µ–º–∞: {f.get('–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è','‚Äì')}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {f.get('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞','‚Äì')}\n"
        )
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"DETAIL|{rec['recordId']}"),
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"EDITREC|{rec['recordId']}")
        )
        bot.send_message(m.chat.id, txt, reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("DETAIL"))
def show_detail(c):
    bot.answer_callback_query(c.id)
    rec_id = c.data.split("|",1)[1]
    data = requests.get(f"{TRUE_TABS_GET}/{rec_id}", headers=HEADERS).json().get('data',{})
    fields = data.get('fields',{})
    txt = "üîç –ü–æ–¥—Ä–æ–±–Ω–æ:\n" + "\n".join(f"‚Ä¢ {k}: {fields.get(k,'‚Äì')}" for k in fields_sequence)
    bot.send_message(c.message.chat.id, txt)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()